package org.sharding.jdbc;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Statement;

import javax.sql.DataSource;

import org.sharding.configuration.Configuration;

/**
 * 
 * @author wenlongLiu
 *
 */
public class ShardConnection extends AbstractConnection {

	private final ShardDataSource shardingDataSource;
	
	
	public ShardConnection(ShardDataSource dataSource){
		this.shardingDataSource = dataSource;
	}
	
	@Override
	public Statement createStatement() throws SQLException {
		return new ShardStatement(this);
	}

	@Override
	public Statement createStatement(int resultSetType, int resultSetConcurrency) throws SQLException {
		return new ShardStatement(this, resultSetType, resultSetConcurrency);
	}

	@Override
	public Statement createStatement(int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
		return new ShardStatement(this, resultSetType, resultSetConcurrency, resultSetHoldability);
	}

	@Override
	public PreparedStatement prepareStatement(String sql) throws SQLException {
		return new ShardPreparedStatement(this, sql);
	}

	@Override
	public PreparedStatement prepareStatement(String sql, int autoGeneratedKeys) throws SQLException {
		return new ShardPreparedStatement(this, sql, autoGeneratedKeys);
	}

	@Override
	public PreparedStatement prepareStatement(String sql, int[] columnIndexes) throws SQLException {
		return new ShardPreparedStatement(this, sql, columnIndexes);
	}

	@Override
	public PreparedStatement prepareStatement(String sql, String[] columnNames) throws SQLException {
		return new ShardPreparedStatement(this, sql, columnNames);
	} 

	@Override
	public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency) throws SQLException {
		return new ShardPreparedStatement(this, sql, resultSetType, resultSetConcurrency);
	}

	@Override
	public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
		return new ShardPreparedStatement(this, sql, resultSetType, resultSetConcurrency, resultSetHoldability);
	}
	
	public Configuration getConfiguration(){
		return this.shardingDataSource.getConfiguration();
	}
	
	public DataSource getDataSource(String key){
		return this.shardingDataSource.getDataSource(key);
	}
	
	public Connection getConnection(String key) throws SQLException{
		Connection connection = getDataSource(key).getConnection();
		addRealConnection(connection);
		return connection;
	}
}
