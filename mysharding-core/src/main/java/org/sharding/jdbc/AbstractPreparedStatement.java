package org.sharding.jdbc;

import java.io.InputStream;
import java.io.Reader;
import java.math.BigDecimal;
import java.net.URL;
import java.sql.Array;
import java.sql.Blob;
import java.sql.Clob;
import java.sql.Date;
import java.sql.NClob;
import java.sql.ParameterMetaData;
import java.sql.PreparedStatement;
import java.sql.Ref;
import java.sql.ResultSetMetaData;
import java.sql.RowId;
import java.sql.SQLException;
import java.sql.SQLXML;
import java.sql.Time;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Calendar;
import java.util.Collection;

import org.sharding.executor.ParameterCallback;
import org.sharding.shard.Parameter;
/**
 * 
 * @author wenlongliu
 *
 */
public abstract class AbstractPreparedStatement extends ShardStatement implements PreparedStatement{
	protected int[]    columnIndexes;
	protected String[] columnNames;
	protected Integer  autoGeneratedKeys;
	protected Collection<ParameterCallback> paramCallbacks = new LinkedList<ParameterCallback>();
	protected Collection<Parameter<?>> parameters = new ArrayList<Parameter<?>>();
	
	public AbstractPreparedStatement(ShardConnection connection) {
		super(connection);
	}
	
	public AbstractPreparedStatement(ShardConnection connection, int resultSetType, int resultSetConcurrency) {
		super(connection, resultSetType, resultSetConcurrency);
	}
	
	public AbstractPreparedStatement(ShardConnection connection, int resultSetType, int resultSetConcurrency,int resultSetHoldability) {
		super(connection, resultSetType, resultSetConcurrency, resultSetHoldability);
	}
	
	@Override
	public void setNull(final int parameterIndex, final int sqlType) throws SQLException {
		parameters.add(new Parameter<Integer>(parameterIndex, null));
		paramCallbacks.add(new ParameterCallback(){
			@Override
			public void call(PreparedStatement preparedStatement) throws SQLException {
				preparedStatement.setNull(parameterIndex, sqlType);
			}});
	}

	@Override
	public void setBoolean(final int parameterIndex,final boolean x) throws SQLException {
		parameters.add(new Parameter<Boolean>(parameterIndex, x));
		paramCallbacks.add(new ParameterCallback(){
			@Override
			public void call(PreparedStatement preparedStatement) throws SQLException {
				preparedStatement.setBoolean(parameterIndex, x);
			}});
	}

	@Override
	public void setByte(final int parameterIndex,final byte x) throws SQLException {
		parameters.add(new Parameter<Byte>(parameterIndex, x));
		paramCallbacks.add(new ParameterCallback(){
			@Override
			public void call(PreparedStatement preparedStatement) throws SQLException {
				preparedStatement.setByte(parameterIndex, x);
			}});
	}

	@Override
	public void setShort(final int parameterIndex,final short x) throws SQLException {
		parameters.add(new Parameter<Short>(parameterIndex, x));
		paramCallbacks.add(new ParameterCallback(){
			@Override
			public void call(PreparedStatement preparedStatement) throws SQLException {
				preparedStatement.setShort(parameterIndex, x);
			}});
	}

	@Override
	public void setInt(final int parameterIndex,final int x) throws SQLException {
		parameters.add(new Parameter<Integer>(parameterIndex, x));
		paramCallbacks.add(new ParameterCallback(){
			@Override
			public void call(PreparedStatement preparedStatement) throws SQLException {
				preparedStatement.setInt(parameterIndex, x);
			}});
	}

	@Override
	public void setLong(final int parameterIndex,final long x) throws SQLException {
		parameters.add(new Parameter<Long>(parameterIndex, x));
		paramCallbacks.add(new ParameterCallback(){
			@Override
			public void call(PreparedStatement preparedStatement) throws SQLException {
				preparedStatement.setLong(parameterIndex, x);
			}});
	}

	@Override
	public void setFloat(final int parameterIndex,final float x) throws SQLException {
		parameters.add(new Parameter<Float>(parameterIndex, x));
		paramCallbacks.add(new ParameterCallback(){
			@Override
			public void call(PreparedStatement preparedStatement) throws SQLException {
				preparedStatement.setFloat(parameterIndex, x);
			}});
	}

	@Override
	public void setDouble(final int parameterIndex, final double x) throws SQLException {
		parameters.add(new Parameter<Double>(parameterIndex, x));
		paramCallbacks.add(new ParameterCallback(){
			@Override
			public void call(PreparedStatement preparedStatement) throws SQLException {
				preparedStatement.setDouble(parameterIndex, x);
			}});
	}

	@Override
	public void setBigDecimal(final int parameterIndex,final BigDecimal x) throws SQLException {
		parameters.add(new Parameter<BigDecimal>(parameterIndex, x));
		paramCallbacks.add(new ParameterCallback(){
			@Override
			public void call(PreparedStatement preparedStatement) throws SQLException {
				preparedStatement.setBigDecimal(parameterIndex, x);
			}});
	}

	@Override
	public void setString(final int parameterIndex, final String x) throws SQLException {
		parameters.add(new Parameter<String>(parameterIndex, x));
		paramCallbacks.add(new ParameterCallback(){
			@Override
			public void call(PreparedStatement preparedStatement) throws SQLException {
				preparedStatement.setString(parameterIndex, x);
			}});
	}

	@Override
	public void setBytes(final int parameterIndex, final byte[] x) throws SQLException {
		parameters.add(new Parameter<byte[]>(parameterIndex, x));
		paramCallbacks.add(new ParameterCallback(){
			@Override
			public void call(PreparedStatement preparedStatement) throws SQLException {
				preparedStatement.setBytes(parameterIndex, x);
			}});
	}

	@Override
	public void setDate(final int parameterIndex, final Date x) throws SQLException {
		parameters.add(new Parameter<Date>(parameterIndex, x));
		paramCallbacks.add(new ParameterCallback(){
			@Override
			public void call(PreparedStatement preparedStatement) throws SQLException {
				preparedStatement.setDate(parameterIndex, x);
			}});
	}

	@Override
	public void setTime(final int parameterIndex,final Time x) throws SQLException {
		parameters.add(new Parameter<Time>(parameterIndex, x));
		paramCallbacks.add(new ParameterCallback(){
			@Override
			public void call(PreparedStatement preparedStatement) throws SQLException {
				preparedStatement.setTime(parameterIndex, x);
			}});
	}

	@Override
	public void setTimestamp(final int parameterIndex, final Timestamp x) throws SQLException {
		parameters.add(new Parameter<Timestamp>(parameterIndex, x));
		paramCallbacks.add(new ParameterCallback(){
			@Override
			public void call(PreparedStatement preparedStatement) throws SQLException {
				preparedStatement.setTimestamp(parameterIndex, x);
			}});
	}

	@Override
	public void setAsciiStream(final int parameterIndex, final InputStream x, final int length) throws SQLException {
		parameters.add(new Parameter<InputStream>(parameterIndex, x));
		paramCallbacks.add(new ParameterCallback(){
			@Override
			public void call(PreparedStatement preparedStatement) throws SQLException {
				preparedStatement.setAsciiStream(parameterIndex, x, length);
			}});
	}

	@Override
	@Deprecated
	public void setUnicodeStream(final int parameterIndex,final InputStream x, final int length) throws SQLException {
		parameters.add(new Parameter<InputStream>(parameterIndex, x));
		paramCallbacks.add(new ParameterCallback(){
			@Override
			public void call(PreparedStatement preparedStatement) throws SQLException {
				preparedStatement.setUnicodeStream(parameterIndex, x, length);
			}});
	}

	@Override
	public void setBinaryStream(final int parameterIndex, final InputStream x, final int length) throws SQLException {
		parameters.add(new Parameter<InputStream>(parameterIndex, x));
		paramCallbacks.add(new ParameterCallback(){
			@Override
			public void call(PreparedStatement preparedStatement) throws SQLException {
				preparedStatement.setBinaryStream(parameterIndex, x, length);
			}});
		
	}

	@Override
	public void clearParameters() throws SQLException {
		parameters.clear();
		paramCallbacks.clear();
		
	}

	@Override
	public void setObject(final int parameterIndex,final Object x,final int targetSqlType) throws SQLException {
		parameters.add(new Parameter<Object>(parameterIndex, x));
		paramCallbacks.add(new ParameterCallback(){
			@Override
			public void call(PreparedStatement preparedStatement) throws SQLException {
				preparedStatement.setObject(parameterIndex, x, targetSqlType);
			}});
	}

	@Override
	public void setObject(final int parameterIndex, final Object x) throws SQLException {
		parameters.add(new Parameter<Object>(parameterIndex, x));
		paramCallbacks.add(new ParameterCallback(){
			@Override
			public void call(PreparedStatement preparedStatement) throws SQLException {
				preparedStatement.setObject(parameterIndex, x);
			}});
	}

	@Override
	public void setCharacterStream(final int parameterIndex, final Reader reader, final int length) throws SQLException {
		paramCallbacks.add(new ParameterCallback(){
			@Override
			public void call(PreparedStatement preparedStatement) throws SQLException {
				preparedStatement.setCharacterStream(parameterIndex, reader, length);
			}});
		
	}

	@Override
	public void setRef(final int parameterIndex, final Ref x) throws SQLException {
		paramCallbacks.add(new ParameterCallback(){
			@Override
			public void call(PreparedStatement preparedStatement) throws SQLException {
				preparedStatement.setRef(parameterIndex, x);
			}});
	}

	@Override
	public void setBlob(final int parameterIndex, final Blob x) throws SQLException {
		paramCallbacks.add(new ParameterCallback(){
			@Override
			public void call(PreparedStatement preparedStatement) throws SQLException {
				preparedStatement.setBlob(parameterIndex, x);
			}});
	}

	@Override
	public void setClob(final int parameterIndex, final Clob x) throws SQLException {
		paramCallbacks.add(new ParameterCallback(){
			@Override
			public void call(PreparedStatement preparedStatement) throws SQLException {
				preparedStatement.setClob(parameterIndex, x);
			}});
	}

	@Override
	public void setArray(final int parameterIndex, final Array x) throws SQLException {
		parameters.add(new Parameter<Object>(parameterIndex, x));
		paramCallbacks.add(new ParameterCallback(){
			@Override
			public void call(PreparedStatement preparedStatement) throws SQLException {
				preparedStatement.setArray(parameterIndex, x);
			}});
	}

	@Override
	public void setDate(final int parameterIndex, final Date x, final Calendar cal) throws SQLException {
		parameters.add(new Parameter<Object>(parameterIndex, x));
		paramCallbacks.add(new ParameterCallback(){
			@Override
			public void call(PreparedStatement preparedStatement) throws SQLException {
				preparedStatement.setDate(parameterIndex, x, cal);
			}});
	}

	@Override
	public void setTime(final int parameterIndex,final Time x,final Calendar cal) throws SQLException {
		parameters.add(new Parameter<Object>(parameterIndex, x));
		paramCallbacks.add(new ParameterCallback(){
			@Override
			public void call(PreparedStatement preparedStatement) throws SQLException {
				preparedStatement.setTime(parameterIndex, x, cal);
			}});
	}

	@Override
	public void setTimestamp(final int parameterIndex, final Timestamp x, final Calendar cal) throws SQLException {
		parameters.add(new Parameter<Object>(parameterIndex, x));
		paramCallbacks.add(new ParameterCallback(){
			@Override
			public void call(PreparedStatement preparedStatement) throws SQLException {
				preparedStatement.setTimestamp(parameterIndex, x, cal);
			}});
	}

	@Override
	public void setNull(final int parameterIndex, final int sqlType, final String typeName) throws SQLException {
		paramCallbacks.add(new ParameterCallback(){
			@Override
			public void call(PreparedStatement preparedStatement) throws SQLException {
				preparedStatement.setNull(parameterIndex, sqlType, typeName);
			}});
	}

	@Override
	public void setURL(final int parameterIndex, final URL x) throws SQLException {
		paramCallbacks.add(new ParameterCallback(){
			@Override
			public void call(PreparedStatement preparedStatement) throws SQLException {
				preparedStatement.setURL(parameterIndex, x);
			}});
	}


	@Override
	public void setRowId(final int parameterIndex, final RowId x) throws SQLException {
		paramCallbacks.add(new ParameterCallback(){
			@Override
			public void call(PreparedStatement preparedStatement) throws SQLException {
				preparedStatement.setRowId(parameterIndex, x);
			}});
	}

	@Override
	public void setNString(final int parameterIndex, final String value) throws SQLException {
		paramCallbacks.add(new ParameterCallback(){
			@Override
			public void call(PreparedStatement preparedStatement) throws SQLException {
				preparedStatement.setNString(parameterIndex, value);
			}});
	}

	@Override
	public void setNCharacterStream(final int parameterIndex,final Reader value,final long length) throws SQLException {
		paramCallbacks.add(new ParameterCallback(){
			@Override
			public void call(PreparedStatement preparedStatement) throws SQLException {
				preparedStatement.setNCharacterStream(parameterIndex, value, length);
			}});
		
	}

	@Override
	public void setNClob(final int parameterIndex,final NClob value) throws SQLException {
		paramCallbacks.add(new ParameterCallback(){
			@Override
			public void call(PreparedStatement preparedStatement) throws SQLException {
				preparedStatement.setNClob(parameterIndex, value);
			}});
	}

	@Override
	public void setClob(final int parameterIndex, final Reader reader, final long length) throws SQLException {
		paramCallbacks.add(new ParameterCallback(){
			@Override
			public void call(PreparedStatement preparedStatement) throws SQLException {
				preparedStatement.setClob(parameterIndex, reader, length);
			}});
	}

	@Override
	public void setBlob(final int parameterIndex, final InputStream inputStream, final long length) throws SQLException {
		paramCallbacks.add(new ParameterCallback(){
			@Override
			public void call(PreparedStatement preparedStatement) throws SQLException {
				preparedStatement.setBlob(parameterIndex, inputStream, length);
			}});
	}

	@Override
	public void setNClob(final int parameterIndex, final Reader reader, final long length) throws SQLException {
		paramCallbacks.add(new ParameterCallback(){
			@Override
			public void call(PreparedStatement preparedStatement) throws SQLException {
				preparedStatement.setNClob(parameterIndex, reader, length);
			}});
	}

	@Override
	public void setSQLXML(final int parameterIndex, final SQLXML xmlObject) throws SQLException {
		paramCallbacks.add(new ParameterCallback(){
			@Override
			public void call(PreparedStatement preparedStatement) throws SQLException {
				preparedStatement.setSQLXML(parameterIndex, xmlObject);
			}});
	}

	@Override
	public void setObject(final int parameterIndex, final Object x, final int targetSqlType, final int scaleOrLength) throws SQLException {
		paramCallbacks.add(new ParameterCallback(){
			@Override
			public void call(PreparedStatement preparedStatement) throws SQLException {
				preparedStatement.setObject(parameterIndex, x, targetSqlType, scaleOrLength);
			}});
	}

	@Override
	public void setAsciiStream(final int parameterIndex, final InputStream x, final long length) throws SQLException {
		paramCallbacks.add(new ParameterCallback(){
			@Override
			public void call(PreparedStatement preparedStatement) throws SQLException {
				preparedStatement.setAsciiStream(parameterIndex, x, length);
			}});
	}

	@Override
	public void setBinaryStream(final int parameterIndex, final InputStream x, final long length) throws SQLException {
		paramCallbacks.add(new ParameterCallback(){
			@Override
			public void call(PreparedStatement preparedStatement) throws SQLException {
				preparedStatement.setBinaryStream(parameterIndex, x, length);
			}});
	}

	@Override
	public void setCharacterStream(final int parameterIndex, final Reader reader, final long length) throws SQLException {
		paramCallbacks.add(new ParameterCallback(){
			@Override
			public void call(PreparedStatement preparedStatement) throws SQLException {
				preparedStatement.setCharacterStream(parameterIndex, reader, length);
			}});
	}

	@Override
	public void setAsciiStream(final int parameterIndex, final InputStream x) throws SQLException {
		paramCallbacks.add(new ParameterCallback(){
			@Override
			public void call(PreparedStatement preparedStatement) throws SQLException {
				preparedStatement.setAsciiStream(parameterIndex, x);
			}});
	}

	@Override
	public void setBinaryStream(final int parameterIndex, final InputStream x) throws SQLException {
		paramCallbacks.add(new ParameterCallback(){
			@Override
			public void call(PreparedStatement preparedStatement) throws SQLException {
				preparedStatement.setBinaryStream(parameterIndex, x);
			}});
	}

	@Override
	public void setCharacterStream(final int parameterIndex, final Reader reader) throws SQLException {
		paramCallbacks.add(new ParameterCallback(){
			@Override
			public void call(PreparedStatement preparedStatement) throws SQLException {
				preparedStatement.setCharacterStream(parameterIndex, reader);
			}});
	}

	@Override
	public void setNCharacterStream(final int parameterIndex, final Reader value) throws SQLException {
		paramCallbacks.add(new ParameterCallback(){
			@Override
			public void call(PreparedStatement preparedStatement) throws SQLException {
				preparedStatement.setNCharacterStream(parameterIndex, value);
			}});
	}

	@Override
	public void setClob(final int parameterIndex, final Reader reader) throws SQLException {
		paramCallbacks.add(new ParameterCallback(){
			@Override
			public void call(PreparedStatement preparedStatement) throws SQLException {
				preparedStatement.setClob(parameterIndex, reader);
			}});
	}

	@Override
	public void setBlob(final int parameterIndex, final InputStream inputStream) throws SQLException {
		paramCallbacks.add(new ParameterCallback(){
			@Override
			public void call(PreparedStatement preparedStatement) throws SQLException {
				preparedStatement.setBlob(parameterIndex, inputStream);
			}});
	}

	@Override
	public void setNClob(final int parameterIndex, final Reader reader) throws SQLException {
		paramCallbacks.add(new ParameterCallback(){
			@Override
			public void call(PreparedStatement preparedStatement) throws SQLException {
				preparedStatement.setNClob(parameterIndex, reader);
			}});
	}
	
	@Override
	public ParameterMetaData getParameterMetaData() throws SQLException {
		// TODO Auto-generated method stub
		return null;
	}
	
	@Override
	public void addBatch() throws SQLException {
		// TODO Auto-generated method stub
		
	}
	
	@Override
	public ResultSetMetaData getMetaData() throws SQLException {
		// TODO Auto-generated method stub
		return null;
	}
}
